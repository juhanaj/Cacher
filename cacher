#!/usr/bin/python

import sys

from PySide import QtCore
from PySide import QtGui
from PySide import QtDeclarative
import os

from PySide import QtOpenGL
from PySide import QtSql

from PySide.QtDeclarative import *
from QtMobility.Location import QGeoCoordinate

from gpscompass import GPSCompass
from sqllistmodel import SqlListModel
from locparser import LOCParser
from routehandler import RouteHandler
from cachemap import CacheMap

import glob

appdirectory = "/home/user/MyDocs/Cacher"

class GPSCoordinateConverter(QtCore.QObject):
    def __init__(self, parent):
        QtCore.QObject.__init__(self, parent)

    @QtCore.Slot(float, float, result=str)
    def coordinateAsString(self, latitude, longitude):
        c = QGeoCoordinate(latitude, longitude)
        s = c.toString(QGeoCoordinate.DegreesMinutesSeconds)
        s = "N " + s
        s = s.replace(",", " E ")
        return s

class Cacher(QtDeclarative.QDeclarativeView):
    def __init__(self):
        QtDeclarative.QDeclarativeView.__init__(self)
        #qmlRegisterType(CacheMap, "UIElements", 1, 0, "CacheMap")

        appDir = QtCore.QDir(appdirectory)
        if not appDir.exists():
            QtCore.QDir("/home/user/MyDocs").mkdir("Cacher") #WTF?

        self.open_database(appdirectory + "/geocache.db") 

        self.model = SqlListModel(self)
        self.model.setTable("caches")
        self.model.generate_roles()
        self.model.load()

        self.compass = GPSCompass(self)
        self.routehandler = RouteHandler(self)
        self.gpsconverter = GPSCoordinateConverter(self)

        context = self.rootContext()
        context.setContextProperty("compass", self.compass)
        context.setContextProperty("geocaches", self.model)
        context.setContextProperty("routehandler", self.routehandler)
        context.setContextProperty("gpsconverter", self.gpsconverter)
        self.setSource('/usr/share/cacher/qml/main.qml')

    def open_database(self, path):
        self.db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        self.db.setDatabaseName(appdirectory + "/geocache.db")
        if not self.db.open():
            print "Can't open database!"

        if not "caches" in self.db.tables():
            query = QtSql.QSqlQuery("create table caches(id INTEGER PRIMARY KEY, \
                                                          name VARCHAR(100),\
                                                          cacheID VARCHAR(100),\
                                                          latitude FLOAT,\
                                                          longitude FLOAT,\
                                                          found BOOLEAN,\
                                                          added TIMESTAMP,\
                                                          found_time TIMESTAMP)")
            if not query.exec_():
                print "Failed to create table, error: %s" % query.lastError()

            
    def parse_new_caches(self):
        locfiles = glob.glob(appdirectory + "/*.loc") 

        parser = LOCParser()
        parser.parsed_locations.connect(self.new_caches)

        for locfile in locfiles:
            f = open(locfile)
            xml = ' '.join(f.readlines())
            parser.parse(xml)

    def add_caches(self, clist):
        cacheids = self.model.cacheids()
        newc = [lc for lc in clist if not lc["id"] in cacheids]
        for c in newc:
            self.model.add(c["name"], c["latitude"], c["longitude"], c["id"])


def main():
    app = QtGui.QApplication(sys.argv)

    qmlRegisterType(CacheMap, "UIElements", 1, 0, "CacheMap")
    cacher = Cacher()

    glw = QtOpenGL.QGLWidget()
    cacher.setViewport(glw)

    cacher.showFullScreen()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
